{"ast":null,"code":"var _jsxFileName = \"D:\\\\Memoire\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.jsx\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Vérifie s'il y a un token au chargement\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        setUser({\n          ...decoded,\n          token\n        });\n      } catch (error) {\n        console.error('Erreur lors du décodage du token :', error);\n        localStorage.removeItem('token');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  // Fonction de connexion\n  const login = userData => {\n    try {\n      var _decoded$role;\n      const {\n        token\n      } = userData;\n      const decoded = jwtDecode(token);\n      setUser({\n        ...decoded,\n        token\n      });\n      localStorage.setItem('token', token);\n\n      // Redirection selon le rôle\n      const role = (_decoded$role = decoded.role) === null || _decoded$role === void 0 ? void 0 : _decoded$role.toLowerCase(); // pour éviter les erreurs de casse\n      if (role === 'admin' || role === 'ministere') {\n        navigate('/ministere/home');\n      } else if (role === 'entreprise') {\n        navigate('/entreprise/home');\n      } else {\n        navigate('/');\n      }\n    } catch (error) {\n      console.error('Erreur lors de la connexion :', error);\n      throw error;\n    }\n  };\n\n  // Fonction de déconnexion\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n    navigate('/login');\n  };\n  const isAuthenticated = () => !!user;\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isLoading,\n      login,\n      logout,\n      isAuthenticated\n    },\n    children: !isLoading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personnalisé pour utiliser le contexte\n_s(AuthProvider, \"o5QfC7aYrUkj9YQ0lGSakMfCddo=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth doit être utilisé à l’intérieur d’un AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","navigate","token","localStorage","getItem","decoded","error","console","removeItem","login","userData","_decoded$role","setItem","role","toLowerCase","logout","isAuthenticated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/Memoire/frontend/src/context/AuthContext.jsx"],"sourcesContent":["// src/context/AuthContext.jsx\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  // Vérifie s'il y a un token au chargement\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        const decoded = jwtDecode(token);\r\n        setUser({ ...decoded, token });\r\n      } catch (error) {\r\n        console.error('Erreur lors du décodage du token :', error);\r\n        localStorage.removeItem('token');\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  // Fonction de connexion\r\n  const login = (userData) => {\r\n    try {\r\n      const { token } = userData;\r\n      const decoded = jwtDecode(token);\r\n      setUser({ ...decoded, token });\r\n      localStorage.setItem('token', token);\r\n\r\n      // Redirection selon le rôle\r\n      const role = decoded.role?.toLowerCase(); // pour éviter les erreurs de casse\r\n      if (role === 'admin' || role === 'ministere') {\r\n        navigate('/ministere/home');\r\n      } else if (role === 'entreprise') {\r\n        navigate('/entreprise/home');\r\n      } else {\r\n        navigate('/');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de la connexion :', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Fonction de déconnexion\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('token');\r\n    navigate('/login');\r\n  };\r\n\r\n  const isAuthenticated = () => !!user;\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, isLoading, login, logout, isAuthenticated }}>\r\n      {!isLoading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook personnalisé pour utiliser le contexte\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth doit être utilisé à l’intérieur d’un AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}