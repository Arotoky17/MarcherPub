{"ast":null,"code":"var _jsxFileName = \"D:\\\\Memoire\\\\frontend\\\\src\\\\context\\\\AuthProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthProvider.js\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\n// 1. Création du Contexte d'Authentification\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 2. Composant AuthProvider qui va fournir le contexte\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Fonction pour nettoyer les données d'authentification (jeton, utilisateur)\n  // Utilisez useCallback pour mémoriser cette fonction et éviter des re-créations inutiles\n  const clearAuth = useCallback(() => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n  }, []); // Aucune dépendance car tout est local\n\n  // Effet pour initialiser l'authentification au chargement de l'application\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('token');\n      const storedUser = localStorage.getItem('user');\n      if (token && storedUser) {\n        try {\n          // Vérifier la validité du jeton auprès du backend\n          const {\n            data\n          } = await axios.get('/api/auth/verify', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          if (data.valid) {\n            // Si valide, définir l'utilisateur à partir du stockage local\n            setUser(JSON.parse(storedUser));\n          } else {\n            // Si non valide, nettoyer les données d'authentification\n            clearAuth();\n          }\n        } catch (error) {\n          // En cas d'erreur (ex: réseau, jeton expiré), nettoyer\n          clearAuth();\n        }\n      }\n      // Indiquer que le chargement est terminé\n      setIsLoading(false);\n    };\n    initializeAuth();\n  }, [clearAuth]); // `clearAuth` est une dépendance car c'est une fonction utilisée dans l'effet\n\n  // Fonction de connexion\n  const login = async credentials => {\n    try {\n      setIsLoading(true);\n      const {\n        data\n      } = await axios.post('/api/auth/login', credentials);\n\n      // Stocker le jeton et l'utilisateur localement\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      setUser(data.user);\n\n      // Retourner le succès et les données de l'utilisateur pour la redirection\n      // La redirection elle-même sera gérée par le composant qui appelle `login`\n      return {\n        success: true,\n        user: data.user\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      // Gérer les erreurs de connexion et les renvoyer\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Échec de la connexion'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fonction de déconnexion\n  const logout = () => {\n    // Nettoyer les données d'authentification\n    clearAuth();\n    // La redirection vers la page de connexion sera gérée par le composant appelant `logout`\n  };\n\n  // Objet de valeur qui sera fourni à tous les consommateurs du contexte\n  const value = {\n    user,\n    isLoading,\n    login,\n    logout,\n    isAuthenticated: !!user // Propriété booléenne pour vérifier si un utilisateur est connecté\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n\n// 3. Hook personnalisé useAuth pour consommer le contexte\n_s(AuthProvider, \"2f2fa77etBm0PeTPUwBT5wC7W/U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  // Vérifie si le hook est utilisé à l'intérieur d'un AuthProvider\n  if (!context) {\n    throw new Error('useAuth doit être utilisé à l\\'intérieur d\\'un AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","clearAuth","localStorage","removeItem","initializeAuth","token","getItem","storedUser","data","get","headers","Authorization","valid","JSON","parse","error","login","credentials","post","setItem","stringify","success","_error$response","_error$response$data","response","message","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/Memoire/frontend/src/context/AuthProvider.jsx"],"sourcesContent":["// src/context/AuthProvider.js\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\n// 1. Création du Contexte d'Authentification\r\nconst AuthContext = createContext();\r\n\r\n// 2. Composant AuthProvider qui va fournir le contexte\r\nexport function AuthProvider({ children }) {\r\n    const [user, setUser] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // Fonction pour nettoyer les données d'authentification (jeton, utilisateur)\r\n    // Utilisez useCallback pour mémoriser cette fonction et éviter des re-créations inutiles\r\n    const clearAuth = useCallback(() => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        setUser(null);\r\n    }, []); // Aucune dépendance car tout est local\r\n\r\n    // Effet pour initialiser l'authentification au chargement de l'application\r\n    useEffect(() => {\r\n        const initializeAuth = async () => {\r\n            const token = localStorage.getItem('token');\r\n            const storedUser = localStorage.getItem('user');\r\n            \r\n            if (token && storedUser) {\r\n                try {\r\n                    // Vérifier la validité du jeton auprès du backend\r\n                    const { data } = await axios.get('/api/auth/verify', {\r\n                        headers: { Authorization: `Bearer ${token}` }\r\n                    });\r\n                    \r\n                    if (data.valid) {\r\n                        // Si valide, définir l'utilisateur à partir du stockage local\r\n                        setUser(JSON.parse(storedUser));\r\n                    } else {\r\n                        // Si non valide, nettoyer les données d'authentification\r\n                        clearAuth();\r\n                    }\r\n                } catch (error) {\r\n                    // En cas d'erreur (ex: réseau, jeton expiré), nettoyer\r\n                    clearAuth();\r\n                }\r\n            }\r\n            // Indiquer que le chargement est terminé\r\n            setIsLoading(false);\r\n        };\r\n\r\n        initializeAuth();\r\n    }, [clearAuth]); // `clearAuth` est une dépendance car c'est une fonction utilisée dans l'effet\r\n\r\n    // Fonction de connexion\r\n    const login = async (credentials) => {\r\n        try {\r\n            setIsLoading(true);\r\n            const { data } = await axios.post('/api/auth/login', credentials);\r\n            \r\n            // Stocker le jeton et l'utilisateur localement\r\n            localStorage.setItem('token', data.token);\r\n            localStorage.setItem('user', JSON.stringify(data.user));\r\n            setUser(data.user);\r\n            \r\n            // Retourner le succès et les données de l'utilisateur pour la redirection\r\n            // La redirection elle-même sera gérée par le composant qui appelle `login`\r\n            return { success: true, user: data.user };\r\n        } catch (error) {\r\n            // Gérer les erreurs de connexion et les renvoyer\r\n            return {\r\n                success: false,\r\n                error: error.response?.data?.message || 'Échec de la connexion'\r\n            };\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fonction de déconnexion\r\n    const logout = () => {\r\n        // Nettoyer les données d'authentification\r\n        clearAuth();\r\n        // La redirection vers la page de connexion sera gérée par le composant appelant `logout`\r\n    };\r\n\r\n    // Objet de valeur qui sera fourni à tous les consommateurs du contexte\r\n    const value = {\r\n        user,\r\n        isLoading,\r\n        login,\r\n        logout,\r\n        isAuthenticated: !!user // Propriété booléenne pour vérifier si un utilisateur est connecté\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\n// 3. Hook personnalisé useAuth pour consommer le contexte\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    // Vérifie si le hook est utilisé à l'intérieur d'un AuthProvider\r\n    if (!context) {\r\n        throw new Error('useAuth doit être utilisé à l\\'intérieur d\\'un AuthProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}