{"ast":null,"code":"var _jsxFileName = \"D:\\\\Memoire\\\\frontend\\\\src\\\\Components\\\\PrivateRoute.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  children,\n  roles\n}) => {\n  _s();\n  const location = useLocation();\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n  try {\n    const decoded = jwtDecode(token);\n    const userRole = decoded.role;\n    if (!roles.includes(userRole)) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 14\n      }, this);\n    }\n    return children;\n  } catch (error) {\n    console.error('Invalid token:', error);\n    localStorage.removeItem('token');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n};\n_s(PrivateRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","jwtDecode","jsxDEV","_jsxDEV","PrivateRoute","children","roles","_s","location","token","localStorage","getItem","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","decoded","userRole","role","includes","error","console","removeItem","_c","$RefreshReg$"],"sources":["D:/Memoire/frontend/src/Components/PrivateRoute.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst PrivateRoute = ({ children, roles }) => {\r\n  const location = useLocation();\r\n  const token = localStorage.getItem('token');\r\n  \r\n  if (!token) {\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n\r\n  try {\r\n    const decoded = jwtDecode(token);\r\n    const userRole = decoded.role;\r\n\r\n    if (!roles.includes(userRole)) {\r\n      return <Navigate to=\"/\" replace />;\r\n    }\r\n\r\n    return children;\r\n  } catch (error) {\r\n    console.error('Invalid token:', error);\r\n    localStorage.removeItem('token');\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n};\r\n\r\nexport default PrivateRoute;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI,CAACF,KAAK,EAAE;IACV,oBAAON,OAAA,CAACJ,QAAQ;MAACa,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEN;MAAS,CAAE;MAACO,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;EAEA,IAAI;IACF,MAAMC,OAAO,GAAGnB,SAAS,CAACQ,KAAK,CAAC;IAChC,MAAMY,QAAQ,GAAGD,OAAO,CAACE,IAAI;IAE7B,IAAI,CAAChB,KAAK,CAACiB,QAAQ,CAACF,QAAQ,CAAC,EAAE;MAC7B,oBAAOlB,OAAA,CAACJ,QAAQ;QAACa,EAAE,EAAC,GAAG;QAACG,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACpC;IAEA,OAAOd,QAAQ;EACjB,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtCd,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;IAChC,oBAAOvB,OAAA,CAACJ,QAAQ;MAACa,EAAE,EAAC,QAAQ;MAACG,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;AACF,CAAC;AAACZ,EAAA,CAtBIH,YAAY;EAAA,QACCJ,WAAW;AAAA;AAAA2B,EAAA,GADxBvB,YAAY;AAwBlB,eAAeA,YAAY;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}