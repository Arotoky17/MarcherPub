{"ast":null,"code":"// server.js\nconst express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst path = require('path');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst fs = require('fs');\nconst multer = require('multer');\nconst app = express();\nconst PORT = 3000;\nconst SECRET_KEY = 'CLE_SUPER_SECRETE';\nconst USERS_FILE = './data/users.json';\nconst OFFERS_FILE = './data/offers.json';\nconst CANDIDATURES_FILE = './data/candidatures.json';\nif (!fs.existsSync('./data')) fs.mkdirSync('./data');\n\n// Multer setup pour les fichiers joints\nconst storage = multer.diskStorage({\n  destination: './uploads',\n  filename: (req, file, cb) => {\n    cb(null, `${Date.now()}-${file.originalname}`);\n  }\n});\nconst upload = multer({\n  storage\n});\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Utilitaires\nfunction loadData(file) {\n  try {\n    if (!fs.existsSync(file)) return [];\n    return JSON.parse(fs.readFileSync(file));\n  } catch {\n    return [];\n  }\n}\nfunction saveData(file, data) {\n  fs.writeFileSync(file, JSON.stringify(data, null, 2));\n}\nfunction verifyToken(req, res, next) {\n  const authHeader = req.headers.authorization || req.query.token;\n  if (!authHeader) return res.status(401).json({\n    error: 'Token manquant'\n  });\n  const token = authHeader.split(' ')[1] || authHeader;\n  try {\n    req.user = jwt.verify(token, SECRET_KEY);\n    next();\n  } catch {\n    return res.status(401).json({\n      error: 'Token invalide'\n    });\n  }\n}\nfunction requireRole(roles) {\n  return (req, res, next) => {\n    if (!roles.includes(req.user.role)) return res.status(403).json({\n      error: 'Accès refusé'\n    });\n    next();\n  };\n}\n\n// Comptes initiaux\nasync function initializeDefaultAccounts() {\n  const users = loadData(USERS_FILE);\n  const defaultAccounts = [{\n    username: 'admin',\n    password: 'admin123',\n    role: 'admin',\n    email: 'admin@system.com'\n  }, {\n    username: 'ministere',\n    password: 'ministere123',\n    role: 'ministere',\n    email: 'contact@ministere.gouv'\n  }];\n  for (const account of defaultAccounts) {\n    if (!users.find(u => u.username === account.username)) {\n      const hashed = await bcrypt.hash(account.password, 10);\n      users.push({\n        ...account,\n        password: hashed\n      });\n    }\n  }\n  saveData(USERS_FILE, users);\n}\n\n// Authentification\napp.post('/api/auth/register', async (req, res) => {\n  const {\n    username,\n    password,\n    email,\n    companyName\n  } = req.body;\n  const users = loadData(USERS_FILE);\n  if (users.find(u => u.username === username)) return res.status(400).json({\n    error: 'Utilisateur existe déjà'\n  });\n  const hashed = await bcrypt.hash(password, 10);\n  users.push({\n    username,\n    password: hashed,\n    role: 'entreprise',\n    email,\n    companyName\n  });\n  saveData(USERS_FILE, users);\n  res.status(201).json({\n    message: 'Inscription réussie'\n  });\n});\napp.post('/api/auth/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  const users = loadData(USERS_FILE);\n  const user = users.find(u => u.username === username);\n  if (!user) return res.status(401).json({\n    error: 'Utilisateur inconnu'\n  });\n  const match = await bcrypt.compare(password, user.password);\n  if (!match) return res.status(401).json({\n    error: 'Mot de passe incorrect'\n  });\n  const token = jwt.sign({\n    username: user.username,\n    role: user.role,\n    email: user.email,\n    companyName: user.companyName || null\n  }, SECRET_KEY, {\n    expiresIn: '1h'\n  });\n  res.json({\n    token,\n    user: {\n      username: user.username,\n      role: user.role,\n      email: user.email,\n      companyName: user.companyName\n    }\n  });\n});\n\n// Offres : Création (Admin), Validation (Ministère), Lecture (Entreprise)\napp.post('/api/admin/offres', verifyToken, requireRole(['admin']), (req, res) => {\n  const offers = loadData(OFFERS_FILE);\n  const {\n    title,\n    description,\n    deadline\n  } = req.body;\n  if (!title || !description || !deadline) {\n    return res.status(400).json({\n      error: 'Tous les champs sont obligatoires'\n    });\n  }\n  const newOffer = {\n    id: Date.now().toString(),\n    title,\n    description,\n    deadline,\n    createdAt: new Date().toISOString(),\n    createdBy: req.user.username,\n    status: 'en_attente'\n  };\n  offers.push(newOffer);\n  saveData(OFFERS_FILE, offers);\n  res.json({\n    message: 'Offre créée',\n    offer: newOffer\n  });\n});\napp.delete('/api/admin/offres/:id', verifyToken, requireRole(['admin']), (req, res) => {\n  let offers = loadData(OFFERS_FILE);\n  const offerId = req.params.id;\n  offers = offers.filter(o => o.id !== offerId);\n  saveData(OFFERS_FILE, offers);\n  res.json({\n    message: 'Offre supprimée'\n  });\n});\napp.delete('/api/users/:username', verifyToken, requireRole(['admin']), (req, res) => {\n  let users = loadData(USERS_FILE);\n  users = users.filter(u => u.username !== req.params.username);\n  saveData(USERS_FILE, users);\n  res.json({\n    message: 'Utilisateur supprimé'\n  });\n});\napp.put('/api/ministere/offres/:id/valider', verifyToken, requireRole(['ministere']), (req, res) => {\n  const offers = loadData(OFFERS_FILE);\n  const offer = offers.find(o => o.id === req.params.id);\n  if (!offer) return res.status(404).json({\n    error: 'Offre non trouvée'\n  });\n  offer.status = 'valide';\n  offer.validatedAt = new Date().toISOString();\n  saveData(OFFERS_FILE, offers);\n  res.json({\n    message: 'Offre validée'\n  });\n});\napp.post('/api/ministere/rejeter/:id', verifyToken, requireRole(['ministere']), (req, res) => {\n  const offers = loadData(OFFERS_FILE);\n  const offer = offers.find(o => o.id === req.params.id);\n  if (!offer) return res.status(404).json({\n    error: 'Offre non trouvée'\n  });\n  offer.status = 'rejetée';\n  offer.rejectedAt = new Date().toISOString();\n  saveData(OFFERS_FILE, offers);\n  res.json({\n    message: 'Offre rejetée'\n  });\n});\napp.get('/api/offres/en-attente', verifyToken, requireRole(['ministere']), (req, res) => {\n  const offers = loadData(OFFERS_FILE).filter(o => o.status === 'en_attente');\n  res.json(offers);\n});\napp.get('/api/entreprise/offres', verifyToken, requireRole(['entreprise']), (req, res) => {\n  const offers = loadData(OFFERS_FILE).filter(o => o.status === 'valide');\n  res.json(offers);\n});\n\n// Candidature (Entreprise)\napp.post('/api/entreprise/candidatures', verifyToken, requireRole(['entreprise']), upload.single('file'), (req, res) => {\n  const {\n    offerId\n  } = req.body;\n  const candidatures = loadData(CANDIDATURES_FILE);\n  const newCandidature = {\n    id: Date.now().toString(),\n    entreprise: req.user.username,\n    offerId,\n    fileUrl: req.file ? `/uploads/${req.file.filename}` : null,\n    status: 'en_attente',\n    submittedAt: new Date().toISOString()\n  };\n  candidatures.push(newCandidature);\n  saveData(CANDIDATURES_FILE, candidatures);\n  res.json({\n    message: 'Candidature soumise',\n    candidature: newCandidature\n  });\n});\n\n// Dashboard Entreprise\napp.get('/api/dashboard/entreprise', verifyToken, requireRole(['entreprise']), (req, res) => {\n  const candidatures = loadData(CANDIDATURES_FILE).filter(c => c.entreprise === req.user.username);\n  const stats = {\n    approuvees: candidatures.filter(c => c.status === 'acceptée').length,\n    enAttente: candidatures.filter(c => c.status === 'en_attente').length,\n    rejetees: candidatures.filter(c => c.status === 'rejetée').length\n  };\n  const offers = loadData(OFFERS_FILE).filter(o => o.status === 'valide');\n  res.json({\n    stats,\n    offers\n  });\n});\n\n// Dashboard Admin\napp.get('/api/dashboard/admin', verifyToken, requireRole(['admin']), (req, res) => {\n  const users = loadData(USERS_FILE);\n  const offers = loadData(OFFERS_FILE);\n  const candidatures = loadData(CANDIDATURES_FILE);\n  const statsByMonth = {};\n  for (const offer of offers) {\n    const month = new Date(offer.createdAt).toISOString().slice(0, 7);\n    statsByMonth[month] = (statsByMonth[month] || 0) + 1;\n  }\n  res.json({\n    stats: {\n      users: users.length,\n      entreprises: users.filter(u => u.role === 'entreprise').length,\n      ministeres: users.filter(u => u.role === 'ministere').length,\n      offers: offers.length,\n      candidatures: candidatures.length\n    },\n    users: users.map(u => ({\n      username: u.username,\n      role: u.role,\n      email: u.email\n    })),\n    offers,\n    candidatures,\n    statsByMonth\n  });\n});\n\n// Dashboard Ministère\napp.get('/api/dashboard/ministere', verifyToken, requireRole(['ministere']), (req, res) => {\n  const offers = loadData(OFFERS_FILE);\n  const recentOffers = offers.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).slice(0, 5);\n  const stats = {\n    total: offers.length,\n    actifs: offers.filter(o => o.status === 'valide').length,\n    rejetees: offers.filter(o => o.status === 'rejetée').length\n  };\n  res.json({\n    recentOffers,\n    stats\n  });\n});\n\n// Offres validées (liste simplifiée pour entreprises et ministère)\napp.get('/api/offres/publiees', verifyToken, requireRole(['entreprise', 'ministere']), (req, res) => {\n  const offers = loadData(OFFERS_FILE).filter(o => o.status === 'valide');\n  res.json(offers);\n});\n\n// Lancement serveur\ninitializeDefaultAccounts().then(() => {\n  app.listen(PORT, () => {\n    console.log(`Serveur en marche sur http://localhost:${PORT}`);\n  });\n});","map":{"version":3,"names":["express","require","cors","bodyParser","path","bcrypt","jwt","fs","multer","app","PORT","SECRET_KEY","USERS_FILE","OFFERS_FILE","CANDIDATURES_FILE","existsSync","mkdirSync","storage","diskStorage","destination","filename","req","file","cb","Date","now","originalname","upload","use","json","static","join","__dirname","loadData","JSON","parse","readFileSync","saveData","data","writeFileSync","stringify","verifyToken","res","next","authHeader","headers","authorization","query","token","status","error","split","user","verify","requireRole","roles","includes","role","initializeDefaultAccounts","users","defaultAccounts","username","password","email","account","find","u","hashed","hash","push","post","companyName","body","message","match","compare","sign","expiresIn","offers","title","description","deadline","newOffer","id","toString","createdAt","toISOString","createdBy","offer","delete","offerId","params","filter","o","put","validatedAt","rejectedAt","get","single","candidatures","newCandidature","entreprise","fileUrl","submittedAt","candidature","c","stats","approuvees","length","enAttente","rejetees","statsByMonth","month","slice","entreprises","ministeres","map","recentOffers","sort","a","b","total","actifs","then","listen","console","log"],"sources":["D:/Memoire/frontend/src/Pages/Dashbord/DashboardEntreprise.jsx"],"sourcesContent":["// server.js\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\nconst path = require('path');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst fs = require('fs');\r\nconst multer = require('multer');\r\n\r\nconst app = express();\r\nconst PORT = 3000;\r\nconst SECRET_KEY = 'CLE_SUPER_SECRETE';\r\n\r\nconst USERS_FILE = './data/users.json';\r\nconst OFFERS_FILE = './data/offers.json';\r\nconst CANDIDATURES_FILE = './data/candidatures.json';\r\n\r\nif (!fs.existsSync('./data')) fs.mkdirSync('./data');\r\n\r\n// Multer setup pour les fichiers joints\r\nconst storage = multer.diskStorage({\r\n  destination: './uploads',\r\n  filename: (req, file, cb) => {\r\n    cb(null, `${Date.now()}-${file.originalname}`);\r\n  }\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// Utilitaires\r\nfunction loadData(file) {\r\n  try {\r\n    if (!fs.existsSync(file)) return [];\r\n    return JSON.parse(fs.readFileSync(file));\r\n  } catch {\r\n    return [];\r\n  }\r\n}\r\nfunction saveData(file, data) {\r\n  fs.writeFileSync(file, JSON.stringify(data, null, 2));\r\n}\r\nfunction verifyToken(req, res, next) {\r\n  const authHeader = req.headers.authorization || req.query.token;\r\n  if (!authHeader) return res.status(401).json({ error: 'Token manquant' });\r\n  const token = authHeader.split(' ')[1] || authHeader;\r\n  try {\r\n    req.user = jwt.verify(token, SECRET_KEY);\r\n    next();\r\n  } catch {\r\n    return res.status(401).json({ error: 'Token invalide' });\r\n  }\r\n}\r\nfunction requireRole(roles) {\r\n  return (req, res, next) => {\r\n    if (!roles.includes(req.user.role)) return res.status(403).json({ error: 'Accès refusé' });\r\n    next();\r\n  };\r\n}\r\n\r\n// Comptes initiaux\r\nasync function initializeDefaultAccounts() {\r\n  const users = loadData(USERS_FILE);\r\n  const defaultAccounts = [\r\n    { username: 'admin', password: 'admin123', role: 'admin', email: 'admin@system.com' },\r\n    { username: 'ministere', password: 'ministere123', role: 'ministere', email: 'contact@ministere.gouv' }\r\n  ];\r\n  for (const account of defaultAccounts) {\r\n    if (!users.find(u => u.username === account.username)) {\r\n      const hashed = await bcrypt.hash(account.password, 10);\r\n      users.push({ ...account, password: hashed });\r\n    }\r\n  }\r\n  saveData(USERS_FILE, users);\r\n}\r\n\r\n// Authentification\r\napp.post('/api/auth/register', async (req, res) => {\r\n  const { username, password, email, companyName } = req.body;\r\n  const users = loadData(USERS_FILE);\r\n  if (users.find(u => u.username === username))\r\n    return res.status(400).json({ error: 'Utilisateur existe déjà' });\r\n\r\n  const hashed = await bcrypt.hash(password, 10);\r\n  users.push({ username, password: hashed, role: 'entreprise', email, companyName });\r\n  saveData(USERS_FILE, users);\r\n  res.status(201).json({ message: 'Inscription réussie' });\r\n});\r\n\r\napp.post('/api/auth/login', async (req, res) => {\r\n  const { username, password } = req.body;\r\n  const users = loadData(USERS_FILE);\r\n  const user = users.find(u => u.username === username);\r\n  if (!user) return res.status(401).json({ error: 'Utilisateur inconnu' });\r\n  const match = await bcrypt.compare(password, user.password);\r\n  if (!match) return res.status(401).json({ error: 'Mot de passe incorrect' });\r\n\r\n  const token = jwt.sign(\r\n    {\r\n      username: user.username,\r\n      role: user.role,\r\n      email: user.email,\r\n      companyName: user.companyName || null\r\n    },\r\n    SECRET_KEY,\r\n    { expiresIn: '1h' }\r\n  );\r\n  res.json({ token, user: { username: user.username, role: user.role, email: user.email, companyName: user.companyName } });\r\n});\r\n\r\n// Offres : Création (Admin), Validation (Ministère), Lecture (Entreprise)\r\napp.post('/api/admin/offres', verifyToken, requireRole(['admin']), (req, res) => {\r\n  const offers = loadData(OFFERS_FILE);\r\n  const { title, description, deadline } = req.body;\r\n  if (!title || !description || !deadline) {\r\n    return res.status(400).json({ error: 'Tous les champs sont obligatoires' });\r\n  }\r\n  const newOffer = {\r\n    id: Date.now().toString(),\r\n    title,\r\n    description,\r\n    deadline,\r\n    createdAt: new Date().toISOString(),\r\n    createdBy: req.user.username,\r\n    status: 'en_attente'\r\n  };\r\n  offers.push(newOffer);\r\n  saveData(OFFERS_FILE, offers);\r\n  res.json({ message: 'Offre créée', offer: newOffer });\r\n});\r\n\r\napp.delete('/api/admin/offres/:id', verifyToken, requireRole(['admin']), (req, res) => {\r\n  let offers = loadData(OFFERS_FILE);\r\n  const offerId = req.params.id;\r\n  offers = offers.filter(o => o.id !== offerId);\r\n  saveData(OFFERS_FILE, offers);\r\n  res.json({ message: 'Offre supprimée' });\r\n});\r\n\r\napp.delete('/api/users/:username', verifyToken, requireRole(['admin']), (req, res) => {\r\n  let users = loadData(USERS_FILE);\r\n  users = users.filter(u => u.username !== req.params.username);\r\n  saveData(USERS_FILE, users);\r\n  res.json({ message: 'Utilisateur supprimé' });\r\n});\r\n\r\napp.put('/api/ministere/offres/:id/valider', verifyToken, requireRole(['ministere']), (req, res) => {\r\n  const offers = loadData(OFFERS_FILE);\r\n  const offer = offers.find(o => o.id === req.params.id);\r\n  if (!offer) return res.status(404).json({ error: 'Offre non trouvée' });\r\n  offer.status = 'valide';\r\n  offer.validatedAt = new Date().toISOString();\r\n  saveData(OFFERS_FILE, offers);\r\n  res.json({ message: 'Offre validée' });\r\n});\r\n\r\napp.post('/api/ministere/rejeter/:id', verifyToken, requireRole(['ministere']), (req, res) => {\r\n  const offers = loadData(OFFERS_FILE);\r\n  const offer = offers.find(o => o.id === req.params.id);\r\n  if (!offer) return res.status(404).json({ error: 'Offre non trouvée' });\r\n  offer.status = 'rejetée';\r\n  offer.rejectedAt = new Date().toISOString();\r\n  saveData(OFFERS_FILE, offers);\r\n  res.json({ message: 'Offre rejetée' });\r\n});\r\n\r\napp.get('/api/offres/en-attente', verifyToken, requireRole(['ministere']), (req, res) => {\r\n  const offers = loadData(OFFERS_FILE).filter(o => o.status === 'en_attente');\r\n  res.json(offers);\r\n});\r\n\r\napp.get('/api/entreprise/offres', verifyToken, requireRole(['entreprise']), (req, res) => {\r\n  const offers = loadData(OFFERS_FILE).filter(o => o.status === 'valide');\r\n  res.json(offers);\r\n});\r\n\r\n// Candidature (Entreprise)\r\napp.post('/api/entreprise/candidatures', verifyToken, requireRole(['entreprise']), upload.single('file'), (req, res) => {\r\n  const { offerId } = req.body;\r\n  const candidatures = loadData(CANDIDATURES_FILE);\r\n  const newCandidature = {\r\n    id: Date.now().toString(),\r\n    entreprise: req.user.username,\r\n    offerId,\r\n    fileUrl: req.file ? `/uploads/${req.file.filename}` : null,\r\n    status: 'en_attente',\r\n    submittedAt: new Date().toISOString()\r\n  };\r\n  candidatures.push(newCandidature);\r\n  saveData(CANDIDATURES_FILE, candidatures);\r\n  res.json({ message: 'Candidature soumise', candidature: newCandidature });\r\n});\r\n\r\n// Dashboard Entreprise\r\napp.get('/api/dashboard/entreprise', verifyToken, requireRole(['entreprise']), (req, res) => {\r\n  const candidatures = loadData(CANDIDATURES_FILE).filter(c => c.entreprise === req.user.username);\r\n  const stats = {\r\n    approuvees: candidatures.filter(c => c.status === 'acceptée').length,\r\n    enAttente: candidatures.filter(c => c.status === 'en_attente').length,\r\n    rejetees: candidatures.filter(c => c.status === 'rejetée').length\r\n  };\r\n  const offers = loadData(OFFERS_FILE).filter(o => o.status === 'valide');\r\n  res.json({ stats, offers });\r\n});\r\n\r\n// Dashboard Admin\r\napp.get('/api/dashboard/admin', verifyToken, requireRole(['admin']), (req, res) => {\r\n  const users = loadData(USERS_FILE);\r\n  const offers = loadData(OFFERS_FILE);\r\n  const candidatures = loadData(CANDIDATURES_FILE);\r\n  const statsByMonth = {};\r\n  for (const offer of offers) {\r\n    const month = new Date(offer.createdAt).toISOString().slice(0, 7);\r\n    statsByMonth[month] = (statsByMonth[month] || 0) + 1;\r\n  }\r\n  res.json({\r\n    stats: {\r\n      users: users.length,\r\n      entreprises: users.filter(u => u.role === 'entreprise').length,\r\n      ministeres: users.filter(u => u.role === 'ministere').length,\r\n      offers: offers.length,\r\n      candidatures: candidatures.length\r\n    },\r\n    users: users.map(u => ({ username: u.username, role: u.role, email: u.email })),\r\n    offers,\r\n    candidatures,\r\n    statsByMonth\r\n  });\r\n});\r\n\r\n// Dashboard Ministère\r\napp.get('/api/dashboard/ministere', verifyToken, requireRole(['ministere']), (req, res) => {\r\n  const offers = loadData(OFFERS_FILE);\r\n  const recentOffers = offers\r\n    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n    .slice(0, 5);\r\n\r\n  const stats = {\r\n    total: offers.length,\r\n    actifs: offers.filter(o => o.status === 'valide').length,\r\n    rejetees: offers.filter(o => o.status === 'rejetée').length\r\n  };\r\n\r\n  res.json({ recentOffers, stats });\r\n});\r\n\r\n// Offres validées (liste simplifiée pour entreprises et ministère)\r\napp.get('/api/offres/publiees', verifyToken, requireRole(['entreprise', 'ministere']), (req, res) => {\r\n  const offers = loadData(OFFERS_FILE).filter(o => o.status === 'valide');\r\n  res.json(offers);\r\n});\r\n\r\n// Lancement serveur\r\ninitializeDefaultAccounts().then(() => {\r\n  app.listen(PORT, () => {\r\n    console.log(`Serveur en marche sur http://localhost:${PORT}`);\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}