const { Offer } = require('../models');

// ‚úÖ Cr√©er une offre
exports.createOffer = async (req, res) => {
  try {
    console.log('=== CR√âATION OFFRE ===');
    console.log('Body re√ßu:', req.body);

    const { title, description, domaine, dateLimite } = req.body;

    // V√©rifie que tous les champs sont fournis
    if (!title || !description || !domaine || !dateLimite) {
      return res.status(400).json({
        message: "Tous les champs sont obligatoires",
        missing: {
          title: !title,
          description: !description,
          domaine: !domaine,
          dateLimite: !dateLimite
        }
      });
    }

    const dateObj = new Date(dateLimite);
    if (isNaN(dateObj.getTime()) || dateObj <= new Date()) {
      return res.status(400).json({ message: "Date limite invalide" });
    }

    // ‚úÖ V√©rifie que l'utilisateur est bien l√†
    console.log("‚úÖ Utilisateur connect√© :", req.user);

    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: "Utilisateur non authentifi√© (req.user manquant)" });
    }

    // Cr√©ation de l'offre
    const newOffer = await Offer.create({
      title: title.trim(),
      description: description.trim(),
      domaine: domaine.trim(),
      dateLimite: dateObj,
      status: 'en_attente',
      createdById: req.user.id
    });

    console.log('‚úÖ Offre cr√©√©e avec succ√®s, ID:', newOffer.id);

    return res.status(201).json({
      message: "Offre cr√©√©e avec succ√®s",
      offre: newOffer
    });

  } catch (err) {
    console.error('‚ùå Erreur cr√©ation:', err);
    return res.status(500).json({
      message: "Erreur serveur",
      error: err.message
    });
  }
};

// üì¢ Offres publi√©es
exports.getPublishedOffers = async (req, res) => {
  try {
    const offres = await Offer.findAll({
      where: { status: 'valide' },
      order: [['createdAt', 'DESC']]
    });

    return res.json({
      message: "Offres publi√©es r√©cup√©r√©es",
      count: offres.length,
      offres
    });
  } catch (err) {
    console.error('‚ùå Erreur r√©cup√©ration offres publi√©es:', err);
    return res.status(500).json({
      message: "Erreur serveur",
      error: err.message
    });
  }
};

// üìÇ Toutes les offres
exports.getAllOffers = async (req, res) => {
  try {
    const offres = await Offer.findAll({
      order: [['createdAt', 'DESC']]
    });

    return res.json({
      message: "Offres r√©cup√©r√©es",
      count: offres.length,
      offres
    });
  } catch (err) {
    console.error('‚ùå Erreur r√©cup√©ration toutes les offres:', err);
    return res.status(500).json({
      message: "Erreur serveur",
      error: err.message
    });
  }
};

// üìÑ Une offre par ID
exports.getOfferById = async (req, res) => {
  try {
    const { id } = req.params;

    if (!id || isNaN(parseInt(id))) {
      return res.status(400).json({ message: "ID invalide" });
    }

    const offre = await Offer.findByPk(id);
    if (!offre) {
      return res.status(404).json({ message: "Offre non trouv√©e" });
    }

    return res.json({
      message: "Offre trouv√©e",
      offre
    });
  } catch (err) {
    console.error('‚ùå Erreur r√©cup√©ration offre par ID:', err);
    return res.status(500).json({
      message: "Erreur serveur",
      error: err.message
    });
  }
};

// ‚úÖ Supprimer une offre
exports.deleteOffer = async (req, res) => {
  try {
    const { id } = req.params;

    if (!id || isNaN(parseInt(id))) {
      return res.status(400).json({ message: "ID invalide" });
    }

    const deleted = await Offer.destroy({ where: { id } });
    if (!deleted) {
      return res.status(404).json({ message: "Offre non trouv√©e" });
    }

    return res.json({ message: "Offre supprim√©e" });
  } catch (err) {
    console.error('‚ùå Erreur suppression offre:', err);
    return res.status(500).json({
      message: "Erreur serveur",
      error: err.message
    });
  }
};

// ‚úÖ Valider une offre
exports.validateOffer = async (req, res) => {
  try {
    const { id } = req.params;

    const offre = await Offer.findByPk(id);
    if (!offre) {
      return res.status(404).json({ message: "Offre non trouv√©e" });
    }

    await offre.update({
      status: 'valide',
      validatedAt: new Date()
    });

    return res.json({
      message: "Offre valid√©e",
      offre
    });
  } catch (err) {
    console.error('‚ùå Erreur validation offre:', err);
    return res.status(500).json({
      message: "Erreur serveur",
      error: err.message
    });
  }
};

// ‚ùå Rejeter une offre
exports.rejectOffer = async (req, res) => {
  try {
    const { id } = req.params;

    const offre = await Offer.findByPk(id);
    if (!offre) {
      return res.status(404).json({ message: "Offre non trouv√©e" });
    }

    await offre.update({
      status: 'rejet√©e',
      rejectedAt: new Date()
    });

    return res.json({
      message: "Offre rejet√©e",
      offre
    });
  } catch (err) {
    console.error('‚ùå Erreur rejet offre:', err);
    return res.status(500).json({
      message: "Erreur serveur",
      error: err.message
    });
  }
};
